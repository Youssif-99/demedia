generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               Int            @id @default(autoincrement())
  email            String
  password         String
  username         String         @unique
  name             String
  bio              String?
  profilePicture   String?
  coverPhoto       String?
  phone            String?
  dateOfBirth      DateTime?
  preferredLang    String?
  isSetupComplete  Boolean        @default(false)
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  blocksInitiated  UserBlock[]    @relation("user_blocks_initiated")
  blocksReceived   UserBlock[]    @relation("user_blocks_received")
  reportsInitiated UserReport[]   @relation("reports_initiated")
  reportsReceived  UserReport[]   @relation("reports_received")
  interests        UserInterest[]
  story            Story[]
  createdAt        DateTime       @default(now())
  suggestionsMade  Suggestion[]   @relation("suggestions_for_user")
  suggestedToMe    Suggestion[]   @relation("suggested_user")
  posthashtag      PostHashtag[]
  chats            Chat[]         @relation("UserChats") // User مشترك في شاتات
  messages         Message[]      // User باعت رسائل
  followers        Follow[]       @relation("follower")
  following        Follow[]       @relation("following")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())

  PostHashtag PostHashtag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model UserBlock {
  id        Int      @id @default(autoincrement())
  blocker   User     @relation("user_blocks_initiated", fields: [blockerId], references: [id])
  blockerId Int
  blocked   User     @relation("user_blocks_received", fields: [blockedId], references: [id])
  blockedId Int
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model UserReport {
  id         Int      @id @default(autoincrement())
  reporter   User     @relation("reports_initiated", fields: [reporterId], references: [id])
  reporterId Int
  reported   User     @relation("reports_received", fields: [reportedId], references: [id])
  reportedId Int
  reason     String?
  createdAt  DateTime @default(now())
}

model Interest {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users UserInterest[]
}

model UserInterest {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  interest   Interest @relation(fields: [interestId], references: [id])
  interestId Int
}

model Story {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Suggestion {
  id             Int      @id @default(autoincrement())
  user           User     @relation("suggestions_for_user", fields: [userId], references: [id])
  userId         Int
  suggestedUser  User     @relation("suggested_user", fields: [suggestedUserId], references: [id])
  suggestedUserId Int
  reason         String?
  createdAt      DateTime @default(now())
}

model Hashtag {
  id     Int     @id @default(autoincrement())
  tag    String  @unique
  posts  PostHashtag[]
}

model PostHashtag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  hashtagId Int

  @@unique([postId, hashtagId])
  User User[]
}

model Chat {
  id        Int       @id @default(autoincrement())
  chatName  String?
  isGroup   Boolean   @default(false)
  members   User[]    @relation("UserChats")
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String

  senderId  Int
  sender    User     @relation(fields: [senderId], references: [id])

  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])

  createdAt DateTime @default(now())
}
